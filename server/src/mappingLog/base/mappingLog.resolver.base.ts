/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MappingLog } from "./MappingLog";
import { MappingLogCountArgs } from "./MappingLogCountArgs";
import { MappingLogFindManyArgs } from "./MappingLogFindManyArgs";
import { MappingLogFindUniqueArgs } from "./MappingLogFindUniqueArgs";
import { CreateMappingLogArgs } from "./CreateMappingLogArgs";
import { UpdateMappingLogArgs } from "./UpdateMappingLogArgs";
import { DeleteMappingLogArgs } from "./DeleteMappingLogArgs";
import { MappingLogService } from "../mappingLog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MappingLog)
export class MappingLogResolverBase {
  constructor(
    protected readonly service: MappingLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MappingLog",
    action: "read",
    possession: "any",
  })
  async _mappingLogsMeta(
    @graphql.Args() args: MappingLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MappingLog])
  @nestAccessControl.UseRoles({
    resource: "MappingLog",
    action: "read",
    possession: "any",
  })
  async mappingLogs(
    @graphql.Args() args: MappingLogFindManyArgs
  ): Promise<MappingLog[]> {
    return this.service.mappingLogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MappingLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MappingLog",
    action: "read",
    possession: "own",
  })
  async mappingLog(
    @graphql.Args() args: MappingLogFindUniqueArgs
  ): Promise<MappingLog | null> {
    const result = await this.service.mappingLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MappingLog)
  @nestAccessControl.UseRoles({
    resource: "MappingLog",
    action: "create",
    possession: "any",
  })
  async createMappingLog(
    @graphql.Args() args: CreateMappingLogArgs
  ): Promise<MappingLog> {
    return await this.service.createMappingLog({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MappingLog)
  @nestAccessControl.UseRoles({
    resource: "MappingLog",
    action: "update",
    possession: "any",
  })
  async updateMappingLog(
    @graphql.Args() args: UpdateMappingLogArgs
  ): Promise<MappingLog | null> {
    try {
      return await this.service.updateMappingLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MappingLog)
  @nestAccessControl.UseRoles({
    resource: "MappingLog",
    action: "delete",
    possession: "any",
  })
  async deleteMappingLog(
    @graphql.Args() args: DeleteMappingLogArgs
  ): Promise<MappingLog | null> {
    try {
      return await this.service.deleteMappingLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
