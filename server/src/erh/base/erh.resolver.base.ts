/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Erh } from "./Erh";
import { ErhCountArgs } from "./ErhCountArgs";
import { ErhFindManyArgs } from "./ErhFindManyArgs";
import { ErhFindUniqueArgs } from "./ErhFindUniqueArgs";
import { CreateErhArgs } from "./CreateErhArgs";
import { UpdateErhArgs } from "./UpdateErhArgs";
import { DeleteErhArgs } from "./DeleteErhArgs";
import { ErhService } from "../erh.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Erh)
export class ErhResolverBase {
  constructor(
    protected readonly service: ErhService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Erh",
    action: "read",
    possession: "any",
  })
  async _erhsMeta(
    @graphql.Args() args: ErhCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Erh])
  @nestAccessControl.UseRoles({
    resource: "Erh",
    action: "read",
    possession: "any",
  })
  async erhs(@graphql.Args() args: ErhFindManyArgs): Promise<Erh[]> {
    return this.service.erhs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Erh, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Erh",
    action: "read",
    possession: "own",
  })
  async erh(@graphql.Args() args: ErhFindUniqueArgs): Promise<Erh | null> {
    const result = await this.service.erh(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Erh)
  @nestAccessControl.UseRoles({
    resource: "Erh",
    action: "create",
    possession: "any",
  })
  async createErh(@graphql.Args() args: CreateErhArgs): Promise<Erh> {
    return await this.service.createErh({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Erh)
  @nestAccessControl.UseRoles({
    resource: "Erh",
    action: "update",
    possession: "any",
  })
  async updateErh(@graphql.Args() args: UpdateErhArgs): Promise<Erh | null> {
    try {
      return await this.service.updateErh({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Erh)
  @nestAccessControl.UseRoles({
    resource: "Erh",
    action: "delete",
    possession: "any",
  })
  async deleteErh(@graphql.Args() args: DeleteErhArgs): Promise<Erh | null> {
    try {
      return await this.service.deleteErh(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
