/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Lookup } from "@prisma/client";

export class LookupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LookupCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.LookupCountArgs>
  ): Promise<number> {
    return this.prisma.lookup.count(args);
  }

  async lookups<T extends Prisma.LookupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LookupFindManyArgs>
  ): Promise<Lookup[]> {
    return this.prisma.lookup.findMany(args);
  }
  async lookup<T extends Prisma.LookupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LookupFindUniqueArgs>
  ): Promise<Lookup | null> {
    return this.prisma.lookup.findUnique(args);
  }
  async createLookup<T extends Prisma.LookupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LookupCreateArgs>
  ): Promise<Lookup> {
    return this.prisma.lookup.create<T>(args);
  }
  async updateLookup<T extends Prisma.LookupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LookupUpdateArgs>
  ): Promise<Lookup> {
    return this.prisma.lookup.update<T>(args);
  }
  async deleteLookup<T extends Prisma.LookupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LookupDeleteArgs>
  ): Promise<Lookup> {
    return this.prisma.lookup.delete(args);
  }
}
