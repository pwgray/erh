/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Lookup } from "./Lookup";
import { LookupCountArgs } from "./LookupCountArgs";
import { LookupFindManyArgs } from "./LookupFindManyArgs";
import { LookupFindUniqueArgs } from "./LookupFindUniqueArgs";
import { CreateLookupArgs } from "./CreateLookupArgs";
import { UpdateLookupArgs } from "./UpdateLookupArgs";
import { DeleteLookupArgs } from "./DeleteLookupArgs";
import { LookupService } from "../lookup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Lookup)
export class LookupResolverBase {
  constructor(
    protected readonly service: LookupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Lookup",
    action: "read",
    possession: "any",
  })
  async _lookupsMeta(
    @graphql.Args() args: LookupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Lookup])
  @nestAccessControl.UseRoles({
    resource: "Lookup",
    action: "read",
    possession: "any",
  })
  async lookups(@graphql.Args() args: LookupFindManyArgs): Promise<Lookup[]> {
    return this.service.lookups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lookup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lookup",
    action: "read",
    possession: "own",
  })
  async lookup(
    @graphql.Args() args: LookupFindUniqueArgs
  ): Promise<Lookup | null> {
    const result = await this.service.lookup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lookup)
  @nestAccessControl.UseRoles({
    resource: "Lookup",
    action: "create",
    possession: "any",
  })
  async createLookup(@graphql.Args() args: CreateLookupArgs): Promise<Lookup> {
    return await this.service.createLookup({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lookup)
  @nestAccessControl.UseRoles({
    resource: "Lookup",
    action: "update",
    possession: "any",
  })
  async updateLookup(
    @graphql.Args() args: UpdateLookupArgs
  ): Promise<Lookup | null> {
    try {
      return await this.service.updateLookup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lookup)
  @nestAccessControl.UseRoles({
    resource: "Lookup",
    action: "delete",
    possession: "any",
  })
  async deleteLookup(
    @graphql.Args() args: DeleteLookupArgs
  ): Promise<Lookup | null> {
    try {
      return await this.service.deleteLookup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
