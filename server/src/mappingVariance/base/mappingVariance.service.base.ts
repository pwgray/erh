/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MappingVariance } from "@prisma/client";

export class MappingVarianceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MappingVarianceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MappingVarianceCountArgs>
  ): Promise<number> {
    return this.prisma.mappingVariance.count(args);
  }

  async mappingVariances<T extends Prisma.MappingVarianceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MappingVarianceFindManyArgs>
  ): Promise<MappingVariance[]> {
    return this.prisma.mappingVariance.findMany(args);
  }
  async mappingVariance<T extends Prisma.MappingVarianceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MappingVarianceFindUniqueArgs>
  ): Promise<MappingVariance | null> {
    return this.prisma.mappingVariance.findUnique(args);
  }
  async createMappingVariance<T extends Prisma.MappingVarianceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MappingVarianceCreateArgs>
  ): Promise<MappingVariance> {
    return this.prisma.mappingVariance.create<T>(args);
  }
  async updateMappingVariance<T extends Prisma.MappingVarianceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MappingVarianceUpdateArgs>
  ): Promise<MappingVariance> {
    return this.prisma.mappingVariance.update<T>(args);
  }
  async deleteMappingVariance<T extends Prisma.MappingVarianceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MappingVarianceDeleteArgs>
  ): Promise<MappingVariance> {
    return this.prisma.mappingVariance.delete(args);
  }
}
