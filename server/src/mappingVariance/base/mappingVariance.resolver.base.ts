/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MappingVariance } from "./MappingVariance";
import { MappingVarianceCountArgs } from "./MappingVarianceCountArgs";
import { MappingVarianceFindManyArgs } from "./MappingVarianceFindManyArgs";
import { MappingVarianceFindUniqueArgs } from "./MappingVarianceFindUniqueArgs";
import { CreateMappingVarianceArgs } from "./CreateMappingVarianceArgs";
import { UpdateMappingVarianceArgs } from "./UpdateMappingVarianceArgs";
import { DeleteMappingVarianceArgs } from "./DeleteMappingVarianceArgs";
import { MappingVarianceService } from "../mappingVariance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MappingVariance)
export class MappingVarianceResolverBase {
  constructor(
    protected readonly service: MappingVarianceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MappingVariance",
    action: "read",
    possession: "any",
  })
  async _mappingVariancesMeta(
    @graphql.Args() args: MappingVarianceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MappingVariance])
  @nestAccessControl.UseRoles({
    resource: "MappingVariance",
    action: "read",
    possession: "any",
  })
  async mappingVariances(
    @graphql.Args() args: MappingVarianceFindManyArgs
  ): Promise<MappingVariance[]> {
    return this.service.mappingVariances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MappingVariance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MappingVariance",
    action: "read",
    possession: "own",
  })
  async mappingVariance(
    @graphql.Args() args: MappingVarianceFindUniqueArgs
  ): Promise<MappingVariance | null> {
    const result = await this.service.mappingVariance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MappingVariance)
  @nestAccessControl.UseRoles({
    resource: "MappingVariance",
    action: "create",
    possession: "any",
  })
  async createMappingVariance(
    @graphql.Args() args: CreateMappingVarianceArgs
  ): Promise<MappingVariance> {
    return await this.service.createMappingVariance({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MappingVariance)
  @nestAccessControl.UseRoles({
    resource: "MappingVariance",
    action: "update",
    possession: "any",
  })
  async updateMappingVariance(
    @graphql.Args() args: UpdateMappingVarianceArgs
  ): Promise<MappingVariance | null> {
    try {
      return await this.service.updateMappingVariance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MappingVariance)
  @nestAccessControl.UseRoles({
    resource: "MappingVariance",
    action: "delete",
    possession: "any",
  })
  async deleteMappingVariance(
    @graphql.Args() args: DeleteMappingVarianceArgs
  ): Promise<MappingVariance | null> {
    try {
      return await this.service.deleteMappingVariance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
