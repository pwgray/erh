/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApplicationItem } from "./ApplicationItem";
import { ApplicationItemCountArgs } from "./ApplicationItemCountArgs";
import { ApplicationItemFindManyArgs } from "./ApplicationItemFindManyArgs";
import { ApplicationItemFindUniqueArgs } from "./ApplicationItemFindUniqueArgs";
import { CreateApplicationItemArgs } from "./CreateApplicationItemArgs";
import { UpdateApplicationItemArgs } from "./UpdateApplicationItemArgs";
import { DeleteApplicationItemArgs } from "./DeleteApplicationItemArgs";
import { ApplicationItemService } from "../applicationItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationItem)
export class ApplicationItemResolverBase {
  constructor(
    protected readonly service: ApplicationItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationItem",
    action: "read",
    possession: "any",
  })
  async _applicationItemsMeta(
    @graphql.Args() args: ApplicationItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationItem])
  @nestAccessControl.UseRoles({
    resource: "ApplicationItem",
    action: "read",
    possession: "any",
  })
  async applicationItems(
    @graphql.Args() args: ApplicationItemFindManyArgs
  ): Promise<ApplicationItem[]> {
    return this.service.applicationItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationItem",
    action: "read",
    possession: "own",
  })
  async applicationItem(
    @graphql.Args() args: ApplicationItemFindUniqueArgs
  ): Promise<ApplicationItem | null> {
    const result = await this.service.applicationItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationItem)
  @nestAccessControl.UseRoles({
    resource: "ApplicationItem",
    action: "create",
    possession: "any",
  })
  async createApplicationItem(
    @graphql.Args() args: CreateApplicationItemArgs
  ): Promise<ApplicationItem> {
    return await this.service.createApplicationItem({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationItem)
  @nestAccessControl.UseRoles({
    resource: "ApplicationItem",
    action: "update",
    possession: "any",
  })
  async updateApplicationItem(
    @graphql.Args() args: UpdateApplicationItemArgs
  ): Promise<ApplicationItem | null> {
    try {
      return await this.service.updateApplicationItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationItem)
  @nestAccessControl.UseRoles({
    resource: "ApplicationItem",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationItem(
    @graphql.Args() args: DeleteApplicationItemArgs
  ): Promise<ApplicationItem | null> {
    try {
      return await this.service.deleteApplicationItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
