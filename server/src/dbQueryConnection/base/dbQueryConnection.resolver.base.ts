/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DbQueryConnection } from "./DbQueryConnection";
import { DbQueryConnectionCountArgs } from "./DbQueryConnectionCountArgs";
import { DbQueryConnectionFindManyArgs } from "./DbQueryConnectionFindManyArgs";
import { DbQueryConnectionFindUniqueArgs } from "./DbQueryConnectionFindUniqueArgs";
import { CreateDbQueryConnectionArgs } from "./CreateDbQueryConnectionArgs";
import { UpdateDbQueryConnectionArgs } from "./UpdateDbQueryConnectionArgs";
import { DeleteDbQueryConnectionArgs } from "./DeleteDbQueryConnectionArgs";
import { DbQueryConnectionService } from "../dbQueryConnection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DbQueryConnection)
export class DbQueryConnectionResolverBase {
  constructor(
    protected readonly service: DbQueryConnectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DbQueryConnection",
    action: "read",
    possession: "any",
  })
  async _dbQueryConnectionsMeta(
    @graphql.Args() args: DbQueryConnectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DbQueryConnection])
  @nestAccessControl.UseRoles({
    resource: "DbQueryConnection",
    action: "read",
    possession: "any",
  })
  async dbQueryConnections(
    @graphql.Args() args: DbQueryConnectionFindManyArgs
  ): Promise<DbQueryConnection[]> {
    return this.service.dbQueryConnections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DbQueryConnection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DbQueryConnection",
    action: "read",
    possession: "own",
  })
  async dbQueryConnection(
    @graphql.Args() args: DbQueryConnectionFindUniqueArgs
  ): Promise<DbQueryConnection | null> {
    const result = await this.service.dbQueryConnection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DbQueryConnection)
  @nestAccessControl.UseRoles({
    resource: "DbQueryConnection",
    action: "create",
    possession: "any",
  })
  async createDbQueryConnection(
    @graphql.Args() args: CreateDbQueryConnectionArgs
  ): Promise<DbQueryConnection> {
    return await this.service.createDbQueryConnection({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DbQueryConnection)
  @nestAccessControl.UseRoles({
    resource: "DbQueryConnection",
    action: "update",
    possession: "any",
  })
  async updateDbQueryConnection(
    @graphql.Args() args: UpdateDbQueryConnectionArgs
  ): Promise<DbQueryConnection | null> {
    try {
      return await this.service.updateDbQueryConnection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DbQueryConnection)
  @nestAccessControl.UseRoles({
    resource: "DbQueryConnection",
    action: "delete",
    possession: "any",
  })
  async deleteDbQueryConnection(
    @graphql.Args() args: DeleteDbQueryConnectionArgs
  ): Promise<DbQueryConnection | null> {
    try {
      return await this.service.deleteDbQueryConnection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
